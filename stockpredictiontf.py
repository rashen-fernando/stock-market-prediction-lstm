# -*- coding: utf-8 -*-
"""stockpredictionTF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CevfNfiUAYJe6qODu9ZL8nM9DAziYl3F
"""

import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

path = '/content/drive/MyDrive/Project Docments/Stock prediction/dataset/historical data/ES_continuous_adjusted_1hour.txt'
df = pd.read_csv(path ,sep=",", header=None, names=["DateTime", "Open", "High", "Low", "Close", "Volume"])
df['DateTime'] = pd.to_datetime(df['DateTime'])
# df = np.array(df)[:,3:4].astype(np.float)
# df['DateTime'].dt.day[2269]

plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df["DateTime"],df["Close"])
plt.xlabel('Date',fontsize = 18)
plt.ylabel('Close price',fontsize = 18)

data = df.filter(['Close'])
dataset = data.values
training_data_length = math.ceil(len(dataset)*0.8)

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

train_data = scaled_data[:training_data_length]
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=60:
    print(x_train)
    print(y_train)

x_train , y_train = np.array(x_train),np.array(y_train)
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1) )
print(x_train.shape)
print(y_train.shape)

model = Sequential()
model.add(LSTM(50,return_sequences = True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))
model.compile(optimizer='adam', loss = 'mean_squared_error')

model.fit(x_train, y_train, batch_size = 1, epochs = 100)

test_data = scaled_data[training_data_length - 60:,:]
x_test = []
y_test = dataset[training_data_length:,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])
  
x_test = np.array(x_test)
x_test = np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

rmse = np.sqrt(np.mean(predictions-y_test)**2)

train = data[:training_data_length]
valid = data[training_data_length:]
valid['predictions'] = predictions

plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Data',fontsize = 18)
plt.ylabel('Close price',fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close','predictions']])
plt.legend(['Train','Val','predictions'],loc = 'lower_right')
plt.show()

valid

